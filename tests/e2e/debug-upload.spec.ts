import { test, expect } from '@playwright/test'

test.describe('Debug Image Upload', () => {
  test('should debug image upload step by step', async ({ page }) => {
    // Interceptar requests para ver qu√© est√° pasando
    page.on('request', request => {
      if (request.url().includes('storage') || request.url().includes('upload')) {
        console.log('üì§ Request:', request.method(), request.url())
      }
    })
    
    page.on('response', response => {
      if (response.url().includes('storage') || response.url().includes('upload')) {
        console.log('üì• Response:', response.status(), response.url())
      }
    })
    
    // Capturar errores de consola
    page.on('console', msg => {
      if (msg.type() === 'error') {
        console.log('‚ùå Console Error:', msg.text())
      } else if (msg.text().includes('üì§') || msg.text().includes('‚úÖ') || msg.text().includes('‚ùå')) {
        console.log('üîç Upload Log:', msg.text())
      }
    })
    
    // Login como admin
    console.log('üîê Iniciando login...')
    await page.goto('/auth/login')
    await page.fill('input[type="email"]', 'admin@saku.com')
    await page.fill('input[type="password"]', 'admin123')
    await page.click('button[type="submit"]')
    await page.waitForURL('/admin')
    console.log('‚úÖ Login completado')
    
    // Navegar a la p√°gina de edici√≥n
    console.log('üîÑ Navegando a p√°gina de edici√≥n...')
    await page.goto('/admin/productos/21132d18-72c1-4311-b493-389aeb9292a3')
    console.log('‚úÖ P√°gina de edici√≥n cargada')
    
    // Hacer clic en la pesta√±a de im√°genes
    console.log('üñºÔ∏è Haciendo clic en pesta√±a de im√°genes...')
    await page.click('text=Im√°genes')
    await page.waitForSelector('[data-testid="image-upload-dropzone"]')
    console.log('‚úÖ Pesta√±a de im√°genes activa')
    
    // Verificar estado inicial
    const initialImages = await page.locator('[data-testid="uploaded-images"] img').count()
    console.log('üìä Im√°genes iniciales:', initialImages)
    
    // Verificar que el componente est√° presente
    const dropzone = page.locator('[data-testid="image-upload-dropzone"]')
    await expect(dropzone).toBeVisible()
    console.log('‚úÖ Zona de drop visible')
    
    // Verificar input de archivos
    const fileInput = page.locator('input[type="file"]')
    await expect(fileInput).toBeAttached()
    console.log('‚úÖ Input de archivos presente')
    
    // Crear archivo de prueba muy peque√±o
    const smallImageBuffer = Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==', 'base64')
    
    console.log('üìÅ Subiendo archivo de prueba...')
    
    // Hacer clic en la zona de drop
    await page.click('[data-testid="image-upload-dropzone"]')
    
    // Subir archivo
    await fileInput.setInputFiles({
      name: 'test-tiny.png',
      mimeType: 'image/png',
      buffer: smallImageBuffer
    })
    
    console.log('‚è≥ Esperando indicador de subida...')
    
    // Esperar indicador de subida con timeout m√°s largo
    try {
      await page.waitForSelector('text=Subiendo...', { timeout: 10000 })
      console.log('‚úÖ Indicador de subida encontrado')
      
      // Esperar a que termine la subida
      await page.waitForSelector('text=Subiendo...', { state: 'hidden', timeout: 30000 })
      console.log('‚úÖ Subida completada')
    } catch (error) {
      console.log('‚ö†Ô∏è No se encontr√≥ indicador de subida o no termin√≥:', error instanceof Error ? error.message : String(error))
    }
    
    // Esperar un poco para que se actualice la UI
    await page.waitForTimeout(5000)
    
    // Verificar estado final
    const finalImages = await page.locator('[data-testid="uploaded-images"] img').count()
    console.log('üìä Im√°genes finales:', finalImages)
    
    // Tomar screenshot para debug
    await page.screenshot({ path: 'debug-upload-final.png', fullPage: true })
    
    // Verificar si hay errores en la p√°gina
    const errorMessages = await page.locator('text=error').count()
    console.log('‚ùå Mensajes de error encontrados:', errorMessages)
    
    // El test pasa si no hay errores cr√≠ticos, independientemente de si la imagen se subi√≥
    expect(errorMessages).toBe(0)
  })
})