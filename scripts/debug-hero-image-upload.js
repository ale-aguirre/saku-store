#!/usr/bin/env node

/**
 * Script para diagnosticar problemas con la subida de imagen del hero
 */

import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Cargar variables de entorno
config({ path: join(__dirname, '..', '.env') })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables de entorno faltantes:')
  console.error('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl)
  console.error('SUPABASE_SERVICE_ROLE:', !!supabaseServiceKey)
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkStorageBuckets() {
  console.log('\nüóÇÔ∏è Verificando buckets de storage...')
  
  try {
    const { data: buckets, error } = await supabase.storage.listBuckets()
    
    if (error) {
      console.error('‚ùå Error obteniendo buckets:', error)
      return false
    }
    
    console.log('üìã Buckets disponibles:')
    buckets.forEach(bucket => {
      console.log(`  - ${bucket.id} (p√∫blico: ${bucket.public})`)
    })
    
    const imagesBucket = buckets.find(b => b.id === 'images')
    if (!imagesBucket) {
      console.error('‚ùå Bucket "images" no encontrado')
      return false
    }
    
    console.log('‚úÖ Bucket "images" encontrado')
    return true
  } catch (error) {
    console.error('‚ùå Error verificando buckets:', error)
    return false
  }
}

async function checkStoragePolicies() {
  console.log('\nüîê Verificando pol√≠ticas de storage...')
  
  try {
    // Verificar pol√≠ticas usando una consulta SQL
    const { data: policies, error } = await supabase
      .from('pg_policies')
      .select('*')
      .like('tablename', '%objects%')
    
    if (error) {
      console.warn('‚ö†Ô∏è No se pudieron verificar las pol√≠ticas directamente')
      console.log('Esto es normal si no tienes permisos de lectura en pg_policies')
    } else {
      console.log('üìã Pol√≠ticas encontradas:', policies?.length || 0)
    }
    
    return true
  } catch (error) {
    console.warn('‚ö†Ô∏è Error verificando pol√≠ticas:', error.message)
    return true // No es cr√≠tico
  }
}

async function testImageUpload() {
  console.log('\nüì∏ Probando subida de imagen de prueba...')
  
  try {
    // Crear un archivo de prueba (imagen 1x1 pixel PNG)
    const testImageData = Buffer.from([
      0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
      0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
      0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xDE, 0x00, 0x00, 0x00,
      0x0C, 0x49, 0x44, 0x41, 0x54, 0x08, 0x99, 0x01, 0x01, 0x00, 0x00, 0x00,
      0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0xE2, 0x21, 0xBC, 0x33,
      0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
    ])
    
    const fileName = `test-hero-${Date.now()}.png`
    const filePath = `home/${fileName}`
    
    console.log(`üìÅ Subiendo archivo de prueba: ${filePath}`)
    
    const { data, error } = await supabase.storage
      .from('images')
      .upload(filePath, testImageData, {
        contentType: 'image/png',
        cacheControl: '3600',
        upsert: true
      })
    
    if (error) {
      console.error('‚ùå Error subiendo imagen de prueba:', error)
      return false
    }
    
    console.log('‚úÖ Imagen de prueba subida exitosamente:', data.path)
    
    // Obtener URL p√∫blica
    const { data: { publicUrl } } = supabase.storage
      .from('images')
      .getPublicUrl(data.path)
    
    console.log('üîó URL p√∫blica:', publicUrl)
    
    // Verificar que la URL sea accesible
    try {
      const response = await fetch(publicUrl, { method: 'HEAD' })
      if (response.ok) {
        console.log('‚úÖ URL p√∫blica accesible')
      } else {
        console.error('‚ùå URL p√∫blica no accesible:', response.status)
      }
    } catch (fetchError) {
      console.error('‚ùå Error verificando URL:', fetchError.message)
    }
    
    // Limpiar archivo de prueba
    const { error: deleteError } = await supabase.storage
      .from('images')
      .remove([data.path])
    
    if (deleteError) {
      console.warn('‚ö†Ô∏è No se pudo eliminar archivo de prueba:', deleteError)
    } else {
      console.log('üóëÔ∏è Archivo de prueba eliminado')
    }
    
    return true
  } catch (error) {
    console.error('‚ùå Error en test de subida:', error)
    return false
  }
}

async function checkHomeSections() {
  console.log('\nüè† Verificando tabla home_sections...')
  
  try {
    const { data: sections, error } = await supabase
      .from('home_sections')
      .select('*')
      .eq('section_type', 'hero')
    
    if (error) {
      console.error('‚ùå Error consultando home_sections:', error)
      return false
    }
    
    console.log('üìã Secciones hero encontradas:', sections?.length || 0)
    if (sections && sections.length > 0) {
      sections.forEach(section => {
        console.log(`  - ID: ${section.id}, Activa: ${section.is_active}`)
        console.log(`    Imagen: ${section.image_url || 'Sin imagen'}`)
      })
    }
    
    return true
  } catch (error) {
    console.error('‚ùå Error verificando home_sections:', error)
    return false
  }
}

async function main() {
  console.log('üîç Diagn√≥stico de subida de imagen del hero\n')
  
  const checks = [
    { name: 'Storage Buckets', fn: checkStorageBuckets },
    { name: 'Storage Policies', fn: checkStoragePolicies },
    { name: 'Test Image Upload', fn: testImageUpload },
    { name: 'Home Sections', fn: checkHomeSections }
  ]
  
  const results = []
  
  for (const check of checks) {
    console.log(`\nüîÑ Ejecutando: ${check.name}`)
    const result = await check.fn()
    results.push({ name: check.name, success: result })
  }
  
  console.log('\nüìä Resumen de diagn√≥stico:')
  results.forEach(result => {
    const status = result.success ? '‚úÖ' : '‚ùå'
    console.log(`${status} ${result.name}`)
  })
  
  const allPassed = results.every(r => r.success)
  
  if (allPassed) {
    console.log('\nüéâ Todos los checks pasaron. El problema podr√≠a estar en:')
    console.log('  - Permisos de usuario en el frontend')
    console.log('  - Configuraci√≥n del cliente Supabase')
    console.log('  - Manejo de errores en la UI')
  } else {
    console.log('\n‚ö†Ô∏è Se encontraron problemas. Revisa los errores arriba.')
  }
  
  console.log('\nüí° Recomendaciones:')
  console.log('  1. Verifica que el usuario est√© autenticado en el frontend')
  console.log('  2. Revisa la consola del navegador para errores espec√≠ficos')
  console.log('  3. Aseg√∫rate de que las migraciones se hayan ejecutado')
  console.log('  4. Verifica las variables de entorno en el frontend')
}

main().catch(console.error)