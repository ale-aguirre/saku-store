require('dotenv').config({ path: '.env' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function clearAuthState() {
  try {
    console.log('üßπ Limpiando estado de autenticaci√≥n...');
    
    // 1. Verificar sesi√≥n actual
    console.log('\n1Ô∏è‚É£ Verificando sesi√≥n actual...');
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Error obteniendo sesi√≥n:', sessionError);
    } else if (session) {
      console.log('‚ö†Ô∏è  Sesi√≥n encontrada:');
      console.log(`   Usuario: ${session.user.email}`);
      console.log(`   Expira: ${new Date(session.expires_at * 1000).toLocaleString()}`);
      console.log(`   Token v√°lido: ${session.access_token ? 'S√≠' : 'No'}`);
      
      // Cerrar sesi√≥n
      console.log('\nüö™ Cerrando sesi√≥n...');
      const { error: signOutError } = await supabase.auth.signOut();
      
      if (signOutError) {
        console.error('‚ùå Error cerrando sesi√≥n:', signOutError);
      } else {
        console.log('‚úÖ Sesi√≥n cerrada correctamente');
      }
    } else {
      console.log('‚úÖ No hay sesi√≥n activa');
    }
    
    // 2. Verificar sesi√≥n despu√©s del signOut
    console.log('\n2Ô∏è‚É£ Verificando sesi√≥n despu√©s de limpiar...');
    const { data: { session: newSession }, error: newSessionError } = await supabase.auth.getSession();
    
    if (newSessionError) {
      console.error('‚ùå Error verificando nueva sesi√≥n:', newSessionError);
    } else if (newSession) {
      console.log('‚ö†Ô∏è  A√∫n hay sesi√≥n activa (puede ser normal en algunos casos)');
    } else {
      console.log('‚úÖ No hay sesi√≥n activa - estado limpio');
    }
    
    // 3. Simular el comportamiento del hook use-auth
    console.log('\n3Ô∏è‚É£ Simulando comportamiento del hook use-auth...');
    
    const { data: { session: testSession }, error: testError } = await supabase.auth.getSession();
    
    if (testError) {
      console.log('‚ùå Error en getSession (como en el hook):', testError);
    } else if (testSession?.user) {
      console.log('‚ö†Ô∏è  Se detect√≥ usuario - se llamar√≠a fetchUserProfile');
      console.log(`   ID: ${testSession.user.id}`);
      console.log(`   Email: ${testSession.user.email}`);
      
      // Simular fetchUserProfile
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', testSession.user.id)
        .single();
      
      if (profileError) {
        console.log('‚ùå Error fetchUserProfile (este ser√≠a el error que ves):', profileError);
      } else {
        console.log('‚úÖ Perfil encontrado:', profile);
      }
    } else {
      console.log('‚úÖ No hay usuario - NO se llamar√≠a fetchUserProfile');
    }
    
    console.log('\nüìã Resumen:');
    console.log('- Si ves el error "Error fetching user profile: {}" significa que:');
    console.log('  1. Supabase detecta una sesi√≥n de usuario');
    console.log('  2. Pero no encuentra el perfil correspondiente en la tabla profiles');
    console.log('- Si no hay usuarios autenticados, el error NO deber√≠a aparecer');
    console.log('- Refresca la p√°gina para ver si el error persiste');
    
  } catch (error) {
    console.error('‚ùå Error inesperado:', error);
  }
}

clearAuthState().then(() => {
  console.log('\n‚úÖ Limpieza completada');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Error:', error);
  process.exit(1);
});