#!/usr/bin/env node

/**
 * Script de correcci√≥n masiva de precios
 * Divide todos los precios por 100 para corregir el error de importaci√≥n
 * 
 * PROBLEMA: Los precios se importaron multiplicados por 100 incorrectamente
 * SOLUCI√ìN: Dividir todos los precios por 100
 * 
 * Ejemplo: 1,800,000 ‚Üí 18,000 (18 mil pesos)
 */

require('dotenv').config()
const { createClient } = require('@supabase/supabase-js')

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE
)

async function fixPricesMassive() {
  console.log('üîß CORRECCI√ìN MASIVA DE PRECIOS')
  console.log('===============================\n')

  try {
    // 1. Analizar productos afectados
    console.log('üìä Analizando productos afectados...')
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('id, name, base_price')
      .gt('base_price', 100000) // Precios mayores a 100k (claramente err√≥neos)

    if (productsError) {
      console.error('‚ùå Error obteniendo productos:', productsError)
      return
    }

    console.log(`üì¶ Productos afectados: ${products.length}`)
    
    // 2. Analizar variantes afectadas
    const { data: variants, error: variantsError } = await supabase
      .from('product_variants')
      .select('id, product_id, price, size, color, products!inner(name)')
      .gt('price', 100000) // Precios mayores a 100k

    if (variantsError) {
      console.error('‚ùå Error obteniendo variantes:', variantsError)
      return
    }

    console.log(`üìã Variantes afectadas: ${variants.length}`)

    // 3. Mostrar preview de cambios
    console.log('\nüîç PREVIEW DE CAMBIOS:')
    console.log('=====================')
    
    console.log('\nüì¶ PRODUCTOS:')
    products.slice(0, 5).forEach(p => {
      const oldPrice = p.base_price
      const newPrice = Math.round(oldPrice / 100)
      console.log(`- ${p.name}: $${oldPrice.toLocaleString()} ‚Üí $${newPrice.toLocaleString()}`)
    })
    if (products.length > 5) {
      console.log(`... y ${products.length - 5} productos m√°s`)
    }

    console.log('\nüìã VARIANTES:')
    variants.slice(0, 5).forEach(v => {
      const oldPrice = v.price
      const newPrice = Math.round(oldPrice / 100)
      console.log(`- ${v.products.name} ${v.size}/${v.color}: $${oldPrice.toLocaleString()} ‚Üí $${newPrice.toLocaleString()}`)
    })
    if (variants.length > 5) {
      console.log(`... y ${variants.length - 5} variantes m√°s`)
    }

    // 4. Confirmaci√≥n
    console.log('\n‚ö†Ô∏è  CONFIRMACI√ìN REQUERIDA')
    console.log('==========================')
    console.log('Esta operaci√≥n:')
    console.log(`- Corregir√° ${products.length} productos`)
    console.log(`- Corregir√° ${variants.length} variantes`)
    console.log('- Dividir√° todos los precios por 100')
    console.log('- NO es reversible f√°cilmente')
    
    console.log('\n‚è≥ Esperando 5 segundos antes de continuar...')
    console.log('   (Presiona Ctrl+C para cancelar)')
    
    await new Promise(resolve => setTimeout(resolve, 5000))

    // 5. Ejecutar correcci√≥n de productos
    console.log('\nüîÑ Corrigiendo precios de productos...')
    let productosCorregidos = 0
    
    for (const product of products) {
      const newPrice = Math.round(product.base_price / 100)
      
      const { error } = await supabase
        .from('products')
        .update({ base_price: newPrice })
        .eq('id', product.id)

      if (error) {
        console.error(`‚ùå Error corrigiendo producto ${product.name}:`, error)
      } else {
        productosCorregidos++
        console.log(`‚úÖ ${product.name}: $${product.base_price.toLocaleString()} ‚Üí $${newPrice.toLocaleString()}`)
      }
    }

    // 6. Ejecutar correcci√≥n de variantes
    console.log('\nüîÑ Corrigiendo precios de variantes...')
    let variantesCorregidas = 0
    
    for (const variant of variants) {
      const newPrice = Math.round(variant.price / 100)
      
      const { error } = await supabase
        .from('product_variants')
        .update({ price: newPrice })
        .eq('id', variant.id)

      if (error) {
        console.error(`‚ùå Error corrigiendo variante:`, error)
      } else {
        variantesCorregidas++
        console.log(`‚úÖ ${variant.products.name} ${variant.size}/${variant.color}: $${variant.price.toLocaleString()} ‚Üí $${newPrice.toLocaleString()}`)
      }
    }

    // 7. Resumen final
    console.log('\nüéâ CORRECCI√ìN COMPLETADA')
    console.log('========================')
    console.log(`‚úÖ Productos corregidos: ${productosCorregidos}/${products.length}`)
    console.log(`‚úÖ Variantes corregidas: ${variantesCorregidas}/${variants.length}`)
    
    if (productosCorregidos === products.length && variantesCorregidas === variants.length) {
      console.log('\nüéØ ¬°Todos los precios fueron corregidos exitosamente!')
    } else {
      console.log('\n‚ö†Ô∏è  Algunos precios no pudieron ser corregidos. Revisar logs.')
    }

    // 8. Verificaci√≥n post-correcci√≥n
    console.log('\nüîç Verificando correcci√≥n...')
    const { data: remainingProducts } = await supabase
      .from('products')
      .select('id, name, base_price')
      .gt('base_price', 100000)

    const { data: remainingVariants } = await supabase
      .from('product_variants')
      .select('id, price')
      .gt('price', 100000)

    console.log(`üì¶ Productos con precios altos restantes: ${remainingProducts?.length || 0}`)
    console.log(`üìã Variantes con precios altos restantes: ${remainingVariants?.length || 0}`)

    if ((remainingProducts?.length || 0) === 0 && (remainingVariants?.length || 0) === 0) {
      console.log('\n‚úÖ ¬°Verificaci√≥n exitosa! No quedan precios err√≥neos.')
    }

  } catch (error) {
    console.error('‚ùå Error durante la correcci√≥n:', error)
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  fixPricesMassive()
}

module.exports = { fixPricesMassive }